<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ömer Özkan</title>
    <link>https://omerozkan.net/post/</link>
    <description>Recent content in Posts on Ömer Özkan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tr</language>
    <lastBuildDate>Tue, 27 Dec 2016 21:26:03 +0300</lastBuildDate>
    <atom:link href="https://omerozkan.net/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>AB 17 ve Temiz Kod Kursu</title>
      <link>https://omerozkan.net/ab-17/</link>
      <pubDate>Tue, 27 Dec 2016 21:26:03 +0300</pubDate>
      
      <guid>https://omerozkan.net/ab-17/</guid>
      <description>

&lt;p&gt;Her yıl düzenlenen Akademik Bilişim 17, Aksaray&amp;rsquo;da 4 - 11 Şubat tarihleri arasında düzenleniyor.&lt;/p&gt;

&lt;p&gt;Geçen yıl olduğu gibi bu yılda &lt;strong&gt;&lt;em&gt;Temiz Kod&lt;/em&gt;&lt;/strong&gt; kursu ve &lt;strong&gt;&lt;em&gt;RESTFul Web Servisleri&lt;/em&gt;&lt;/strong&gt; semineri ile etkinliğe katılıyorum. Bu yıl ikincisini düzenleyeceğim &amp;ldquo;Temiz Kod&amp;rdquo; kursun geçen seneye göre daha verimli olacağını düşünüyorum.&lt;/p&gt;

&lt;p&gt;Kurslar ve seminerler tamamen &lt;strong&gt;&lt;em&gt;ücretsiz&lt;/em&gt;&lt;/strong&gt; olup herkese açıktır. Katılımcılar dilerlerse KYK yurtlarında uygun fiyatlara konaklayabilirler.  Kurs kayıtları &lt;a href=&#34;https://kayit.ab.org.tr/&#34;&gt;https://kayit.ab.org.tr/&lt;/a&gt; üzerinden 2 - 10 Ocak tarihleri arasında yapılacaktır.&lt;/p&gt;

&lt;p&gt;Açılan diğer kurslar hakkında bilgiyi &lt;a href=&#34;http://ab.org.tr/ab17/kurs.html&#34;&gt;buradan&lt;/a&gt; bulabilirsiniz. Temiz kod kursuna gelirsek:&lt;/p&gt;

&lt;h3 id=&#34;kurs-hakkında:1bddc67295093770280394596bf680ba&#34;&gt;Kurs Hakkında&lt;/h3&gt;

&lt;p&gt;Bir yazılımın bakımını yapmak geliştirmekten daha zordur. Kod altyapısının temiz olması ürünün bakımını kolaylaştırır. Bu açıdan temiz kod akımı yazılımda oldukça önemli ve popüler bir hale gelmiştir.&lt;/p&gt;

&lt;p&gt;Temiz kod üretebilmek ve yeniden yapılandırmak (refactoring) için gerekli kurallar ve teknikler Java programlama dili ve araçları kullanılarak uygulamalı olarak anlatılacaktır. Kurs temel olarak &lt;strong&gt;&lt;em&gt;temiz kod prensipleri&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;temel yazılım prensipleri&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;yeniden yapılandırma teknikleri&lt;/em&gt;&lt;/strong&gt; ve &lt;strong&gt;&lt;em&gt;test kavramları&lt;/em&gt;&lt;/strong&gt; konularından oluşmaktadır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not:&lt;/strong&gt; Bu kurs yazılım geliştiricileri veya mühendisleri içindir. Test mühendisliği ile ilgilenen adaylar için bu kurs uygun değildir.&lt;/p&gt;

&lt;h3 id=&#34;katılımcılar-için-ön-koşullar:1bddc67295093770280394596bf680ba&#34;&gt;Katılımcılar için Ön Koşullar&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Temel düzeyde nesne yönelimli programlama (OOP) bilgisi olan&lt;/li&gt;
&lt;li&gt;Okuduğunu anlayacak düzeyde İngilizce bilgisi olan&lt;/li&gt;
&lt;li&gt;Temiz kod ve yeniden yapılandırma (refactoring) gibi kavramlara meraklı&lt;/li&gt;
&lt;li&gt;Herhangi bir nesne yönelimli bir dil ile proje geliştiren,&lt;/li&gt;
&lt;li&gt;Tercihen Java programlama diline hakim kişiler hedeflenmiştir.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;katılımcılardan-istenenler:1bddc67295093770280394596bf680ba&#34;&gt;Katılımcılardan İstenenler&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Dizüstü bilgisayarlarının yanında getirmeleri,&lt;/li&gt;
&lt;li&gt;Sistemlerine JDK 8 (Java Development Kit) ve Eclipse for JavaEE (Neon) kurmaları gerekmektedir. Dileyenler IntellijIdea&amp;rsquo;nın topluluk versiyonunu Apache License kullanabilirler.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;kontenjan:1bddc67295093770280394596bf680ba&#34;&gt;Kontenjan&lt;/h3&gt;

&lt;p&gt;Kontenjan &lt;strong&gt;16&lt;/strong&gt; kişi ile sınırlıdır.&lt;/p&gt;

&lt;h3 id=&#34;kursiyer-seçimi:1bddc67295093770280394596bf680ba&#34;&gt;Kursiyer Seçimi&lt;/h3&gt;

&lt;p&gt;Katılımcıların seviyesini ve/veya kursiyer seçimi için kurstan önce çevrimiçi bir sınav uygulaması yapılacaktır. Bütün katılımcıların sınava dahil olması zorunludur.&lt;/p&gt;

&lt;h3 id=&#34;konular:1bddc67295093770280394596bf680ba&#34;&gt;Konular&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Temiz kod nedir?&lt;/li&gt;
&lt;li&gt;Kod Konvansiyonu (Code Convention)&lt;/li&gt;
&lt;li&gt;İsimlendirme&lt;/li&gt;
&lt;li&gt;Fonksiyonlar / Metodlar&lt;/li&gt;
&lt;li&gt;Yorum Satırları&lt;/li&gt;
&lt;li&gt;Kod Stili&lt;/li&gt;
&lt;li&gt;SOLID&lt;/li&gt;
&lt;li&gt;Exception / Error Handling&lt;/li&gt;
&lt;li&gt;Sınıflar&lt;/li&gt;
&lt;li&gt;Üçüncü parti bağımlılıklar&lt;/li&gt;
&lt;li&gt;Yeniden yapılandırma (Refactoring)&lt;/li&gt;
&lt;li&gt;Temel yeniden yapılandırma teknikleri&lt;/li&gt;
&lt;li&gt;Eclipse ile yeniden yapılandırma&lt;/li&gt;
&lt;li&gt;Yazılımda Test Kavramı ve JUnit&lt;/li&gt;
&lt;li&gt;Test Güdümlü Geliştirme&lt;/li&gt;
&lt;li&gt;Örnek Uygulama: Bowling Oyunu&lt;/li&gt;
&lt;li&gt;Test prensipleri (FIRST)&lt;/li&gt;
&lt;li&gt;Örnek Uygulama: Video Store&lt;/li&gt;
&lt;li&gt;Testlerin temizlenmesi&lt;/li&gt;
&lt;li&gt;Ürün kodunun temizlenmesi&lt;/li&gt;
&lt;li&gt;Kodu gözden geçirme (Code Review)&lt;/li&gt;
&lt;li&gt;Sistemler ve Yazılım Mimarisi&lt;/li&gt;
&lt;li&gt;Microservice Mimari&lt;/li&gt;
&lt;li&gt;Örnek Uygulamalar&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Java&#39;da Override Anotasyonu</title>
      <link>https://omerozkan.net/java-override-anotasyonu/</link>
      <pubDate>Tue, 04 Oct 2016 22:29:03 +0300</pubDate>
      
      <guid>https://omerozkan.net/java-override-anotasyonu/</guid>
      <description>&lt;p&gt;Merhabalar,&lt;/p&gt;

&lt;p&gt;Daha önce Java 8 ile gelen Optional sınıfından bahsetmiştim. Java ile ilgili ufak detay bilgiler vermeye devam edeceğim. Bu yazımızda Java Override anotasyonunun öneminden bahsedeceğim.&lt;/p&gt;

&lt;p&gt;Java ile herhangi bir IDE kullandıysanız karşınıza mutlaka çıkmıştır. Bilmeyenler için kısaca açıklarsak Java&amp;rsquo;da bir sınıfın interface ve ata sınıfında yer alan metodları implement etmek veya değiştirmek için yazdığımız metodu &lt;code&gt;@Override&lt;/code&gt; annotasyonu ile işaretleyerek bunu belirtmiş oluruz.  Bir sınıf içerisinde Override anotasyonu metodun üst sınıflardan geldiğini bilmek için güzel bir araçtır. Varolmasının en temel amacı da budur.&lt;/p&gt;

&lt;p&gt;Fakat Java&amp;rsquo;da bu anotasyonu kullanmak zorunda değilsiniz. Bu anotasyonu kaldırdığınızda herhangi bir compile hatası almazsınız. Fakat bu anotasyonun sağladığı önemli bir avantajı daha var. Bunun için çok kısa ve kolay bir örnek yapalım. Özellikle yeni başlayanların hata yaptığı konulardan biri:&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/3e3687873617c00380018445d27dc567.js?file=member1.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Basit bir üye sınıfımız var. Bu sınıfın son metodunu incelerseniz bir &lt;code&gt;equals&lt;/code&gt; metodu tanımladık. Bu metodu bir test edelim.&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/3e3687873617c00380018445d27dc567.js?file=memberTest1.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Bu testi çalıştırdığınızda ekranda &lt;code&gt;true&lt;/code&gt; yazdığını görüyoruz. &lt;code&gt;equals&lt;/code&gt; metodumuz çalışıyor. Şimdi testimizde ufak bir değişiklik yapalım.&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/3e3687873617c00380018445d27dc567.js?file=memberTest2.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Referanslarımızı üst sınıfa yani &lt;code&gt;Object&lt;/code&gt; sınıfına çektik. Bu testi çalıştırdığımızda da ekranda &lt;code&gt;true&lt;/code&gt; beklerken birden &lt;code&gt;false&lt;/code&gt; değerini aldık.  Anladınız değil mi hatayı? Java&amp;rsquo;ya yeni başlayanların durumu anlaması biraz zor olabilir.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Object.equals&lt;/code&gt; metodunun işaretin(signature)&amp;lsquo;e bakalım: &lt;code&gt;public boolean equals(Object obj)&lt;/code&gt; Member sınıfında implement ettiğimiz metod ise &lt;code&gt;public boolean equals(Member m)&lt;/code&gt; gördüğünüz gibi bu iki metod birbirinden farklıdır. Java&amp;rsquo;da metod parametrelerini üst sınıftan altsınıflara çekemezsiniz. Yani &lt;code&gt;Object.equals&lt;/code&gt; metodunu override etmek yerine yeni bir metod eklemiş olduk.&lt;/p&gt;

&lt;p&gt;Burda belirtmek istediğim bir durum daha var. &lt;code&gt;equals&lt;/code&gt; metodu &lt;code&gt;Object&lt;/code&gt; referansı ile farklı &lt;code&gt;Member&lt;/code&gt; referansı ile farklı sonuçlar verdi. &lt;code&gt;Member.equals&lt;/code&gt; metodu üst sınıf olan &lt;code&gt;Object&lt;/code&gt; in yerine geçemedi. Bu Liskov yerine geçme prensibi(Liskov Subsitution Principle)&amp;lsquo;ne aykırıdır.&lt;/p&gt;

&lt;p&gt;Şimdi geldik asıl sorumuza: &lt;code&gt;@Override&lt;/code&gt; anotasyonu ne işimize yarayacak? &lt;code&gt;Member.equals&lt;/code&gt; metoduna bu anotasyonu tanımlayalım.&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/3e3687873617c00380018445d27dc567.js?file=memberEquals1.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Bu kodu derlemeye çalıştığnızda , &lt;strong&gt;&lt;em&gt;method does not override or implement a method from a supertype&lt;/em&gt;&lt;/strong&gt; hatasını alırsınız. Bu sayede bu anotasyon yanlışı compile zamanında size göstermiş oldu. Bu dikkatsizlik yayında daha kötü sonuçlara sebep olabilir.&lt;/p&gt;

&lt;p&gt;Object sınıfı en çok bilinen sınıflardan biri olduğu için &lt;code&gt;Object.equals&lt;/code&gt; elzem bir durum oluşturmayabilir. Fakat kendi yazdığınız interface ve üst sınıflar veya kullandığınız framework&amp;rsquo;lerde bu hatayı yapabilir, uygulamanızı tutarsız hale getirebilirsiniz. Yine yeni başlayanlar için düzgün bir &lt;code&gt;Member.equals&lt;/code&gt; örneği de vereyim.&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/3e3687873617c00380018445d27dc567.js?file=memberEquals2.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Bu kodu kendim yazmadım. Günümüzde Java IDE&amp;rsquo;leri bu kodu otomatik olarak üretebiliyor. Bu arada farklı bir yazıda anlatacağım fakat ek bilgi olarak belirteyim. Java&amp;rsquo;da &lt;code&gt;equals&lt;/code&gt; metodu tanımlarken mutlaka &lt;code&gt;hashCode&lt;/code&gt; metodunu da tanımlamalısınız. Java 7 ve sonrası için bunu yapmak oldukça kolay:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/3e3687873617c00380018445d27dc567.js?file=hashCode.java&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Bu sebeple bu anotasyonu kullanın, kullandırın!&lt;/p&gt;

&lt;p&gt;Başka bir yazıda görüşmek üzere&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java 8 Optional ve null dönebilen metotlar</title>
      <link>https://omerozkan.net/java-8-optional/</link>
      <pubDate>Fri, 03 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://omerozkan.net/java-8-optional/</guid>
      <description>&lt;p&gt;Merhabalar, bu yazıda sizlere Java 8 ile beraber gelen Optional sınıfından bahsedeceğim. Bu yazı ile birlikte Java
programlama dili ve teknolojileri konusunda ufak bilgiler paylaşmaya devam edeceğim. Umarım faydalı olur.&lt;/p&gt;

&lt;p&gt;Optional sınıfının kullanımına bir örnek vererek anlatacağım. Doğrudan anlatabilecek kadar basit bir sınıf olmasına rağmen
örnek üzerinden gitmenin daha kalıcı olduğunu düşünüyorum. Örneğimizde bir UserRepository sınıfı tasarlayacağız.
Interface&amp;rsquo;imiz şu şekilde:&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/0ef7a9c175d40cdbea57ea72de25140e.js?file=userRepository1.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;UserRepository interface&amp;rsquo;inde &lt;code&gt;getByUsername()&lt;/code&gt; metodunun tanımlandığını görüyoruz. Adından da anlaşılacağı üzere kullanıcı
adı ile veritabanında kayıtlı bir kullanıcıyı bulmak istiyoruz. Basitçe aşağıdaki implementasyonu yapabiliriz.&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/0ef7a9c175d40cdbea57ea72de25140e.js?file=userRepositoryImpl1.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Herhangi bir persistent api kullanarak kullanıcı listesini aldık. Eğer liste boş dönerse girdiğimiz kullanıcı adına sahip
bir kullanıcı olmadığı anlamına geldiğinden &lt;code&gt;null&lt;/code&gt; object döndük. Eğer kullanıcı varsa listenin ilk elemanını dönüyoruz.
Kullandığınız api&amp;rsquo;nin ne olduğunun bir önemi yok. Bundan farklı bir implementasyonda olabilirdi. Burda dikkat etmemiz gereken
eğer veritabanında kullanıcı yoksa ne döneceğimiz. Bu tasarımda &lt;code&gt;null&lt;/code&gt; dönmüş olduk.&lt;/p&gt;

&lt;p&gt;Başlangıçta tasarım kusursuz görünse de &lt;code&gt;null&lt;/code&gt; dönmenin dezavantajları var. Bu sınıfı kullanan istemciye bir sorumluluk yükledik.
İstemci kullanıcıyı sorguladıktan sonra ayrıca bir de &lt;code&gt;null&lt;/code&gt;dönüp dönmediğini kontrol etmek zorunda. Aksi takdirde
NullPointerException&amp;rsquo;a sebep olur. Ayrıca bu aslında bir implementasyon detayı. İstemci açısından interface&amp;rsquo;e baktığınızda
aslında &lt;code&gt;null&lt;/code&gt; bir değer bekleyemeyiz. Basitçe bir metot var ve kullanıcı adı verip kullanıcı nesnesi alıyoruz. Yani interface
de &lt;code&gt;null&lt;/code&gt; obje gelebileceğine dair herhangi bir tanımlama yok. Javadoc veya yorum satırı mı geldi aklınıza? Burdaki javadoc
veya yorum satırı kötü koda sebep olur. Ayrıca kod açısından yine istemciyi bağlayan birşey yok. Bir diğer sorun ise null
dönülmesi bir implementasyon detayı. İmplementasyon yüzünden defensif programlama yapmak zorunda kalıyoruz.&lt;/p&gt;

&lt;p&gt;Burdaki durumda aslında kullanıcı nesnesinin &lt;code&gt;null&lt;/code&gt; gelebileceğini tahmin edebiliriz. Mantıken baktığınızda kullanıcı
veritabanında yoksa ne olur diye düşündüğünüzde &lt;code&gt;null&lt;/code&gt; dönebileceğini anlayabilirsiniz.
Fakat her durumda bu kadar basit bir durumda olmayabilir. Daha karmaşık bir implementasyonda istemci olarak bunu görmek
daha zordur. &lt;code&gt;null&lt;/code&gt; dönmek yerine exception kullanarak bir tasarım yapabiliriz:&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/0ef7a9c175d40cdbea57ea72de25140e.js?file=userRepositoryImpl2.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;interface&amp;rsquo;i de şu şekilde değiştiriyoruz:&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/0ef7a9c175d40cdbea57ea72de25140e.js?file=userRepository2.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Bu implementasyon yukarıda bahsettiğim sorunu çözüyor. Burada basit bir şekilde kullanıcı yoksa UserNotFoundException&amp;rsquo;u
fırlattık. Ayrıca checked exception olduğundan istemci bu metodu çağırırken exception&amp;rsquo;u handle etmek zorunda veya bir üst
katmana bırakabilir. Sonuç olarak implementasyona bakmadan interface bize exception fırlatabileceğini tanımlar.&lt;/p&gt;

&lt;p&gt;Bu tasarımın da yine dezavantajları var. İstemci taraf ya bir try-catch bloğu yazmak zorunda. Yani exception mekanizmasını
bir istisna durumu için değil normal akışın bir parçası olarak kullandık. Burada örneğin veritabanı bağlantısı kesilirse
exception atabilirdik veya istemci geçersiz bir kullanıcı adı gönderdiğinde IllegalArgumentException gibi bir exception
fırlatabilirdik. Fakat burdaki durum ne istemciye bağlı bir input hatası ne de beklenmeyen bir durum. O yüzden bu tarz
yapılarda Exception kullanmamalıyız.&lt;/p&gt;

&lt;p&gt;Çözüm olarak yine ilk tasarımımıza dönüp User entity&amp;rsquo;si dönmek yerine bir Result objesi dönebiliriz.&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/0ef7a9c175d40cdbea57ea72de25140e.js?file=userRepositoryImpl3.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;User entity&amp;rsquo;sini doğrudan dönmek yerine araya başka bir sınıf yerleştirerek ilk durumdaki sorunu çözmüş oluyoruz. Artık kullanıcının
veritabanında olmayacağını daha net bir şekilde ifade ettik. Bu tür Result sınıflarını immutable tanımlarsak daha iyi bir
tasarım yapmış oluruz. Constructor&amp;rsquo;lara isim veremediğimiz için burada static metod kullanmayı tercih ettim. UserResult sınıfı&amp;rsquo;da aşağıdaki gibi.&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/0ef7a9c175d40cdbea57ea72de25140e.js?file=userResult.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;İstemci taraf doesUserExist() metodu ile kontrol edip gereken işlemi yapabilir. Bu şekilde tasarımımız daha stabil oldu.
Àyrıca bunun büyük bir proje olacağını düşünürsek UserResult sınıfını daha generic olarak tasarlayabiliriz.&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/0ef7a9c175d40cdbea57ea72de25140e.js?file=entityResult.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;UserRepositoryImpl sınıfımızı da düzenleyelim.&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/0ef7a9c175d40cdbea57ea72de25140e.js?file=userRepositoryImpl4.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;EntityResult gibi result objeleri farklı implementasyonlar da içerebilir. Burda &lt;code&gt;null&lt;/code&gt;dönme problemini için kullandık.
Özellikle katmanlar arası iletişim bu şekilde yapılmalıdır.&lt;/p&gt;

&lt;p&gt;Java7 ile geliştirme yapsaydık eğer muhtemelen bu şekilde geliştirme yapacağız. Fakat Java 8 de bunun için &lt;code&gt;java.util&lt;/code&gt;
paketinin içerisinde &lt;code&gt;Optional&lt;/code&gt; diye bir sınıf eklendi. Kendi EntityResult gibi sınıflar yazmak yerine null dönebilen
metodlar için return type&amp;rsquo;ı Optional olarak tanımlayabiliriz.&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/0ef7a9c175d40cdbea57ea72de25140e.js?file=userRepositoryImpl5.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Optional yine tasarladığımız EntityResult gibi generic ve immutable bir sınıf. Yine &lt;code&gt;Optional.empty()&lt;/code&gt; aynı şekilde boş bir result dönüyor.
&lt;code&gt;null&lt;/code&gt; dönebilen yerlerde bunu kullanmalıyız. &lt;code&gt;Optional.of()&lt;/code&gt; metodunu da kullanırken dikkatli olmak gerekiyor. Eğer parametre
olarak verdiğiniz objenin değeri &lt;code&gt;null&lt;/code&gt; ise NullPointerException alırsınız. Eğer bir nesne &lt;code&gt;null&lt;/code&gt; olabilirse `Optional.ofNullable
metodunu kullanın. Diğer metodlarına da kısaca değinirsem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;isPresent()&lt;/strong&gt; : eğer empty ise false diğer durumda true döner. İlk tasarımımızdaki null kontrolü yerine kullanılabilir.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;get()&lt;/strong&gt; : Empty olmayan durumlarda Optional içerisinde tanımlanan nesneyi döner. Mutlaka get den önce &lt;code&gt;isPresent()&lt;/code&gt; ile kontrol edilmesi
gerekiyor. Aksi takdirde değer empty ise NoSuchElementException alırsınız.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;orElse(T value)&lt;/strong&gt; : Eğer varsayılan bir değeriniz varsa kullanabilirsiniz. empty ise verdiğiniz değeri, değilse tanımlanan
değeri döner. Örneğin &lt;code&gt;null&lt;/code&gt; almak istiyorsanız &lt;code&gt;orElse(null)&lt;/code&gt; şeklinde nesneyi alabilirsiniz.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bunun gibi birçok metodu var. Aynı zamanda fonksiyonel özellikler de taşıyor. Java 8 ile beraber gelmesi bir raslantı değil :)
Başlangıçta metodları kullanırken mutlaka javadoc ile inceleyin. &lt;code&gt;get()&lt;/code&gt; metodunda olduğu gibi
exception alabilirsiniz. Ayrıca eğer Java 8 de Stream Api ile tanıştıysanız muhtemelen Optional sınıfını kullanmışsınızdır.
Stream Api&amp;rsquo;de oldukça fazla kullanılır. Primitive tipler için de &lt;code&gt;OptionalInt&lt;/code&gt;, &lt;code&gt;OptionalDouble&lt;/code&gt; gibi sınıfları da kullanabilirsiniz.&lt;/p&gt;

&lt;p&gt;Bu yazımda örnek bir tasarım ile Optional sınıfını anlatmaya çalıştım. Umarım faydalı olmuştur.&lt;/p&gt;

&lt;p&gt;Bir sonraki yazıda görüşmek üzere&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wordpress&#39;i Neden Bıraktım</title>
      <link>https://omerozkan.net/wordpressi-neden-biraktim/</link>
      <pubDate>Wed, 18 May 2016 06:47:18 +0300</pubDate>
      
      <guid>https://omerozkan.net/wordpressi-neden-biraktim/</guid>
      <description>&lt;p&gt;Birkaç ay önce yeni tasarımla beraber hugo&amp;rsquo;ya geçtiğimi duyurmuştum. Bu yazıda&amp;rsquo;da neden artık wordpress kullanmadığımı
anlatmaya çalışacağım.&lt;/p&gt;

&lt;p&gt;Uzun süredir yazı yazmadığımı farkedince bunun nedenini araştırmaya başladım. Tabiki kişisel problemlerin de buna büyük
bir etkisi var. Yeni bir blog tasarımının beni bu konuda daha çok motive edeceğini düşündüm ve yeni bir tasarıma karar
verdim. Bununla beraber farklı bir yapıya geçmeyi düşünürken GoLang ile yazılmış Hugo&amp;rsquo;yu bir arkadaşımın tavsiyesi
üzerine inceledim ve denemeye karar verdim. Sonrasında bu site ortaya çıkmış oldu.&lt;/p&gt;

&lt;p&gt;Wordpress&amp;rsquo;i kendi sunucumda host ediyordum. Yoğunluk içerisinde bunun bakımını yapmak, sadece wordpress dışında PHP
ve MySQL&amp;rsquo;in güncellemelerini takip etmek vs gibi işler beni bunaltıyordu. Bir güncelleme ile web sayfasının
çevrimdışı olduğu zamanlar bile oluyordu.&lt;/p&gt;

&lt;p&gt;Kullanımıma göre Wordpress&amp;rsquo;in yazı yazmak dışında hiç bir özelliğini kullanmadığımı farkettim. Bunun dışında markdown
oldukça sevdiğim bir format. Markdown kullanırsam herhangi bir html editorü kullanma zorunluluğumu da ortadan kaldırıyordu.
Başlangıçta Wordpress&amp;rsquo;i markdown ile kullanmayı düşünüyordum. Fakat sonradan bu kararım da değişti.
Önyüz tasarımını değiştirmek zaten zamanımı alacaktı. Bu yüzden kullandığım sistemi de değiştirmek istedim. Ayrıca tüm yazıları markdown&amp;rsquo;a çevirerek
aynı zamanda yazıları da tekrar inceleme fırsatım olacaktı.&lt;/p&gt;

&lt;p&gt;Hugo&amp;rsquo;yu incelediğimde gereksinimlerimin nerdeyse tamamını karşılıyordu. Jekyll&amp;rsquo;da olduğu gibi markdown ile yazıyorsun.
Basit bir command-line ile html üretiyor. Özellikle yapısı ve özelliklerini beğendim.
Jekyll daha önce kullanmadım ama okuduğum kadarıyla birkaç problemi beraberinde getiriyor.
Hugo&amp;rsquo;nun da beğenmediğim bir çok özelliği olmasına rağmen gereksiminlerimi bir şekilde karşıladım.&lt;/p&gt;

&lt;p&gt;Hugo bir komut-satırı (command-line) aracı sunuyor. Hızlı bir şekilde derleme işlemini yapabildiği gibi değişiklikleri canlı olarak görmek için
 bir sunucu da ayağa kaldırabiliyor. Ayrıca komut satırından Web sayfa tamamen statik dosyalardan oluştuğu için istediğiniz yerde host edebilirsiniz.
 Github, Gitlab, Amazon S3 gibi.Yeni bir yazı yayınladığınızda otomatik yayınlanması için de ücretsiz servisler bulunmakta fakat ben Jenkins
ile bunu yapmayı tercih ettim. Yeni bir yazıyı bir git deposuna gönderdikten github üzerindeki başka bir depoya yüklenmesini
sağlıyorum bu şekilde yeni yazı yayınlanıyor.&lt;/p&gt;

&lt;p&gt;Eğer bir basit blogunuz varsa, git vb gibi kavramlarla aranız iyi ise ve sadece içerik üretmeye odaklanmak istiyorsanız hugo&amp;rsquo;yu tavsiye ederim.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;https://gohugo.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bir sonraki yazıda görüşmek üzere&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Yeni Tasarım Yeni Blog</title>
      <link>https://omerozkan.net/yeni-tasarim-yeni-blog/</link>
      <pubDate>Tue, 15 Mar 2016 05:48:56 +0200</pubDate>
      
      <guid>https://omerozkan.net/yeni-tasarim-yeni-blog/</guid>
      <description>&lt;p&gt;Merhabalar&lt;/p&gt;

&lt;p&gt;Uzun zamandır blog yazmıyordum. Bunun en büyük sebebi iş hayatı vs dışında yeni bir yapıya geçmek istememdi.
Bu yüzden öncelikle öncelikle hem tasarımı hem de blog altyapısı değiştirdim.
Yoğunluğun da verdiği etki yüzünden gecikmeli de olsa bugün yeni tasarımı yayınladım.&lt;/p&gt;

&lt;p&gt;İlk blogumu 2008 yılında yayınlamıştım. O zamanlar bloglar popüler olmaya başlamıştı. Bense sadece kendim için bir
web sayfası oluşturmak istedim. Daha sonra yazılım mühendisliği ile ilgilenmem ve üniversite ile birlikte birçok
içeriği çöpe atıp tekrar tekrar yeni yazılar yayınladım. Bu arada birçoğunun tasarımını da kendim yapıp front-end
implementasyonlarını da kendim yaptım. Bu blog da öyle :)&lt;/p&gt;

&lt;p&gt;Önceki tasarımı yaptığım zamanlar, mobil cihazlar popülerleşmeye başlasa da mobil siteler henüz popüler değildi.
Bootstrap CSS framework&amp;rsquo;u o zamanlar hatırlıyorum. Fakat genelde kendi stillerimi oluşturmayı tercih etmiştim.
Benim ilk front-end&amp;rsquo;le uğraştığım zamanlarda tablo ile yapılan sitelerin sayısı az değildi.
Mezun olduktan sonra o temayı yeniledim fakat yine mobil cihazlar için uygun değildi. Önceki temayı geliştirdikten
sonra tamamen back-end teknolojilerle ilgilendim. Uzun bir aradan sonra tekrar front-end e girdim. Normalde daha koyu
renkleri seviyordum bu tasarımda Sadık&amp;rsquo;ın da baskısıyla daha açık renkleri tercih ettim. Yine aynı şekilde sade bir
tasarım tercih ettim. Tamamen yazıyı okuma odaklı bir tasarım oldu. İlk defa bir CSS framework&amp;rsquo;u Semantic UI&amp;rsquo;yu tercih ettim.
Artık günümüzde bu araçlar başarılı ve kesinlikle kullanılması gerekiyor.&lt;/p&gt;

&lt;p&gt;Bu değişimde altyapı da değişti. Şu an bu web sayfası tamamen statik dosyalardan oluşuyor. Evet Wordpress kullanmayı
bıraktım. Bir daha da kullanmayı düşünmüyorum. Php ile ilgili tek bağım da ortadan kalkmış oldu. Statik dosyalardan
oluştuğu için birçok yerde host edebilirim. Şimdilik github ile devam edeceğim. Bu arada gitlab&amp;rsquo;ın da bu konuda
başarılı olduğunu ve ücretsiz private depo verdiğini de söylemeden geçmeyeyim. Bu arada statik sayfaları üretmek için de
&lt;a href=&#34;http://gohugo.io/&#34;&gt;hugo&lt;/a&gt; kullandım.&lt;/p&gt;

&lt;p&gt;Bu arada içeriklerin bir kısmını da restore ettiğimi söylemeliyim. Bazı yazıları tamamen kaldırdım. Bazıları ise yenilenmek
üzere bekliyor.&lt;/p&gt;

&lt;p&gt;Bu benim yeni blogumda ilk yazım. Bundan sonra yazılımla ilgili birçok konuda paylaşımda bulunacağım. İlerde video da
paylaşmayı düşünüyorum. Çok yoğun bir insanım ama zaman buldukça paylaşım yapmaya devam edeceğim. Aynı şekilde bu tasarımda
farklı farklı değişikliklere uğrayabilir.&lt;/p&gt;

&lt;p&gt;Bir sonraki yazıda görüşmek üzere&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AB 16 Temiz Kod Kursu</title>
      <link>https://omerozkan.net/ab-16-temiz-kod-kursu/</link>
      <pubDate>Sat, 02 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://omerozkan.net/ab-16-temiz-kod-kursu/</guid>
      <description>

&lt;p&gt;Merhabalar&lt;/p&gt;

&lt;p&gt;Bu yıl &lt;a href=&#34;http://sadikcetin.net/&#34;&gt;Sadık Çetin&lt;/a&gt; ile beraber, 30 Ocak – 2 Şubat arasında Aydın&amp;rsquo;da düzenlenecek
Akademik Bilişim konferans öncesi kurslar kapsamında Temiz Kod kursu vereceğiz.
Kurs tamamen ücretsiz olup herkese açıktır. Katılımcılar dilerlerse KYK yurtlarında da konaklayabilirler.
Kurs genel olarak clean code, refactoring ve test driven development konularını içermektedir.&lt;/p&gt;

&lt;p&gt;Kayıt için: &lt;a href=&#34;https://kayit.ab.org.tr&#34;&gt;https://kayit.ab.org.tr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kurs hakkında detaylı bilgiyi yazının devamında bulabilirsiniz.&lt;/p&gt;

&lt;h3 id=&#34;kurs-hakkında:71bbf2088587004e82981ef7c8a5324f&#34;&gt;Kurs Hakkında&lt;/h3&gt;

&lt;p&gt;Bir yazılımın bakımını yapmak geliştirmekten daha zordur. Kod altyapısının temiz olması ürünün bakımını kolaylaştırır.
Bu açıdan temiz kod akımı yazılımda oldukça önemli ve popüler bir hale gelmiştir.&lt;/p&gt;

&lt;p&gt;Temiz kod üretebilmek ve yeniden yapılandırmak (refactoring) için gerekli kurallar ve teknikler Java programlama dili ve araçları
kullanılarak uygulamalı olarak anlatılacaktır.&lt;/p&gt;

&lt;h3 id=&#34;katılımcılar-için-ön-şartlar:71bbf2088587004e82981ef7c8a5324f&#34;&gt;Katılımcılar İçin Ön Şartlar&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Temel düzeyde nesne yönelimli programlama (OOP) bilgisi olan&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Okuduğunu anlayacak düzeyde İngilizce bilgisi olan&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Temiz kod ve yeniden yapılandırma (refactoring) gibi kavramlara meraklı&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Herhangi bir nesne yönelimli bir dil ile proje geliştiren,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Tercihen Java programlama diline hakim kişiler hedeflenmiştir.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;katılımcılardan-istenenler:71bbf2088587004e82981ef7c8a5324f&#34;&gt;Katılımcılardan İstenenler&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Dizüstü bilgisayarlarının yanında getirmeleri,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sistemlerine JDK 8 (Java Development Kit) ve Eclipse for JavaEE (Mars) kurmaları gerekmektedir,
(Dileyenler IntellijIdea&amp;rsquo;nın topluluk versiyonunu kullanabilirler.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;kontenjan:71bbf2088587004e82981ef7c8a5324f&#34;&gt;Kontenjan&lt;/h3&gt;

&lt;p&gt;Kontenjan 16 kişi ile sınırlıdır.&lt;/p&gt;

&lt;h3 id=&#34;konular:71bbf2088587004e82981ef7c8a5324f&#34;&gt;Konular&lt;/h3&gt;

&lt;h4 id=&#34;1-gün:71bbf2088587004e82981ef7c8a5324f&#34;&gt;1. Gün&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Temiz kod nedir?&lt;/li&gt;
&lt;li&gt;Kod Konvansiyonu (Code Convention)&lt;/li&gt;
&lt;li&gt;İsimlendirme&lt;/li&gt;
&lt;li&gt;Fonksiyonlar / Metodlar&lt;/li&gt;
&lt;li&gt;Yorum Satırları&lt;/li&gt;
&lt;li&gt;Kod Stili&lt;/li&gt;
&lt;li&gt;Nesneler ve Veri Yapıları&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;2-gün:71bbf2088587004e82981ef7c8a5324f&#34;&gt;2. Gün&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Exception / Error Handling&lt;/li&gt;
&lt;li&gt;Sınıflar&lt;/li&gt;
&lt;li&gt;Üçüncü parti bağımlılıklar&lt;/li&gt;
&lt;li&gt;Yeniden yapılandırma (Refactoring)&lt;/li&gt;
&lt;li&gt;Temel yeniden yapılandırma teknikleri&lt;/li&gt;
&lt;li&gt;Eclipse ile yeniden yapılandırma&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;3-gün:71bbf2088587004e82981ef7c8a5324f&#34;&gt;3. Gün&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Testler ve JUnit&lt;/li&gt;
&lt;li&gt;Temiz Testler&lt;/li&gt;
&lt;li&gt;Test Güdümlü Geliştirme&lt;/li&gt;
&lt;li&gt;Örnek Uygulama: Bowling Oyunu&lt;/li&gt;
&lt;li&gt;Test prensipleri (FIRST)&lt;/li&gt;
&lt;li&gt;Örnek Uygulama: Video Store&lt;/li&gt;
&lt;li&gt;Testlerin temizlenmesi&lt;/li&gt;
&lt;li&gt;Ürün kodunun temizlenmesi&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;4-gün:71bbf2088587004e82981ef7c8a5324f&#34;&gt;4. Gün&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Kodu gözden geçirme (Code Review)&lt;/li&gt;
&lt;li&gt;Sistemler&lt;/li&gt;
&lt;li&gt;Temiz Mimari&lt;/li&gt;
&lt;li&gt;Eşli Programlama (Pair Programming)&lt;/li&gt;
&lt;li&gt;Eşli Programlama Uygulaması: Roma Rakamları, Tenis Oyunu&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Gradle ile Proje İnşası Semineri</title>
      <link>https://omerozkan.net/gradle-ile-proje-insasi-semineri/</link>
      <pubDate>Thu, 09 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://omerozkan.net/gradle-ile-proje-insasi-semineri/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.ozguryazilimgunleri.org.tr/2015&#34;&gt;Özgür Yazılım ve Linux Günleri 2015&lt;/a&gt;, İstanbul Bilgi Üniversite&amp;rsquo;sinde gerçekleşti.&lt;/p&gt;

&lt;p&gt;Bu etkinliğe ben de &amp;ldquo;Gradle ile Proje İnşası&amp;rdquo; başlıklı sunumum ile katıldım.&lt;/p&gt;

&lt;h3 id=&#34;konu-özeti:a5b41cfc4337942d13e42c5c56de025f&#34;&gt;Konu Özeti&lt;/h3&gt;

&lt;p&gt;Gradle, Java dünyasının popüler inşa sistemlerinden biridir.
Popüler inşa sistemleri Ant ve Maven ile uyumlu olmakla beraber, bir programlama dili Groovy ile yapılandırılması sağlanarak esnek bir sistem sunar.
Gradle&amp;rsquo;ın getirdiği yenilikler, bağımlılık yönetimi, derleme ve paketlemenin nasıl yapıldığı, esnek yapısı,
maven ve ant ile kıyaslanması, task&amp;rsquo;ların nasıl yazıldığı, avantajları ve dezavantajları konular örneklerle anlatılmıştır.&lt;/p&gt;

&lt;p&gt;Sunum dosyasına aşağıdaki bağlantılardan ulaşabilirsiniz:&lt;/p&gt;

&lt;h3 id=&#34;slideshare:a5b41cfc4337942d13e42c5c56de025f&#34;&gt;Slideshare&lt;/h3&gt;

&lt;div class=&#34;ui embed&#34;&gt;
    &lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/69EIZbNvE07HIH&#34; width=&#34;595&#34; height=&#34;485&#34;
            frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34;
            style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;div class=&#34;ui hidden divider&#34;&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>AB 15 Java 101 Kursu</title>
      <link>https://omerozkan.net/akademik-bilisim-15-java-101-kursu/</link>
      <pubDate>Tue, 30 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://omerozkan.net/akademik-bilisim-15-java-101-kursu/</guid>
      <description>

&lt;p&gt;Her yıl farklı bir üniversitede gerçekleşen Akademik Bilişim etkinliğine bu yıl Eskişehir Anadolu Üniversitesi ev sahipliği yapıyor.
Etkinlik 31 Ocak – 6 Şubat tarihleri arasında düzenlenecek. Konferans öncesi kurslar ise 31 Ocak – 3 Şubat arasında&amp;hellip;&lt;/p&gt;

&lt;p&gt;Bu yıl Akademik Bilişim&amp;rsquo;de Java 101 başlıklı Java&amp;rsquo;ya başlangıç yapmak isteyenler için kurs vereceğim. Katılım tamamen ücretsizdir.
Katılımcılar isterlerse KYK&amp;rsquo;da konaklayabilirler.&lt;/p&gt;

&lt;h3 id=&#34;hedef-kitle:9a905544edc0e3221aa5eb3d7e338cbf&#34;&gt;Hedef Kitle&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Temel algoritma, veri yapıları ve temel düzeyde nesne yönelimli programlama bilgisi olan,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Başka bir programlama dilini bilen ve Java&amp;rsquo;ya başlangıç yapmak isteyen,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Uzun zaman önce Java ile tanışmış fakat ilerleyememiş, temiz ve hızlı bir başlangıç yapmak isteyenler kişiler için hedeflenmiştir.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kurs sonunda katılımcılar nesne yönelimli programlama (Object oriented programming) öğrenip,
Java ile ilgili teknolojilerde kendilerini geliştirebilmek için temel oluşturacak bilgi birikimine sahip olacaktır.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;katılımcılardan-istenenler:9a905544edc0e3221aa5eb3d7e338cbf&#34;&gt;Katılımcılardan İstenenler&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Herhangi bir linux dağıtımı yüklü dizüstü bilgisayarını getirmesi (Sanal makine tercih edilmemelidir.
Mümkünse OpenSuse, Ubuntu veya Fedora dağıtımlardan biri tercih edilmelidir )&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sistemlerine OpenJDK 7(veya üzeri) yüklemeleri&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Eclipse Luna (veya bir önceki sürümü Kepler) yüklemeleri gerekmektedir.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not: Kurs sırasında herhangi bir yükleme işlemi yapılmayacaktır. O yüzden mutlaka yazılımların yüklü olması gerekmektedir.
Yazılım yüklemeleri için gereken döküman katılımcılara özel olarak eposta gönderilecektir.&lt;/p&gt;

&lt;h3 id=&#34;kontenjan-ve-kursiyer-seçimi:9a905544edc0e3221aa5eb3d7e338cbf&#34;&gt;Kontenjan ve Kursiyer Seçimi&lt;/h3&gt;

&lt;p&gt;Katılımcı sayısı 30 ile sınırlandırılmıştır. Başvuru sayısı fazla olması halinde adaylara 3 gün içerisinde doldurması gereken anket gönderilecektir.
Cevaplanan anketler sonucunda kursa uygun olan katılımcılar seçilecektir.&lt;/p&gt;

&lt;h3 id=&#34;konular:9a905544edc0e3221aa5eb3d7e338cbf&#34;&gt;Konular&lt;/h3&gt;

&lt;h4 id=&#34;1-gün:9a905544edc0e3221aa5eb3d7e338cbf&#34;&gt;1. Gün&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Java&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JDK, JRE, JVM, Java Versiyonları&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Java ile İlk Program&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Veri Tipleri, Operatörler, String&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Döngü ve Koşul&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sınıflar, Nesneler&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Construction&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Nesne Yönelimli Programlamaya Giriş&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kapsülleme (Encapsulation)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kalıtım (Inheritance)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;2-gün:9a905544edc0e3221aa5eb3d7e338cbf&#34;&gt;2. Gün&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Polimorfizm&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Soyutlama (Abstraction)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Casting&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Interface &amp;amp; Abstract Sınıflar&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Statik ve Final&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;3-gün:9a905544edc0e3221aa5eb3d7e338cbf&#34;&gt;3. Gün&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Exception Handling (Checked &amp;amp; Unchecked)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Diziler (Array)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Generic&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;4-gün:9a905544edc0e3221aa5eb3d7e338cbf&#34;&gt;4. Gün&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Collections (List, Set, Map, Iteration)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enumeration&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mutable &amp;amp; Immutable&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Inner Class&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;String &amp;amp; StringBuilder&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;SOLID&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kursa kayıt olmak için 1 Ocak 2015 tarihinden itibaren &lt;a href=&#34;http://ab2015.anadolu.edu.tr/&#34;&gt;http://ab2015.anadolu.edu.tr/&lt;/a&gt; adresinden yapabilirsiniz.
Kurs ile ilgili sorularınızı eposta ile sorabilirsiniz.&lt;/p&gt;

&lt;h3 id=&#34;diğer-kurslar:9a905544edc0e3221aa5eb3d7e338cbf&#34;&gt;Diğer Kurslar&lt;/h3&gt;

&lt;p&gt;Akademik Bilişim&amp;rsquo;de 40&amp;rsquo;a yakın kurs düzenlenecektir.
Kurslarla ilgili detaylı bilgiyi &lt;a href=&#34;http://ab.org.tr/ab15/kurs.html&#34;&gt;http://ab.org.tr/ab15/kurs.html&lt;/a&gt; adresinden edinebilirsiniz.&lt;/p&gt;

&lt;p&gt;Eskişehir&amp;rsquo;de görüşmek üzere&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bir Proje Hikayesi: Vipera</title>
      <link>https://omerozkan.net/bir-proje-hikayesi-vipera/</link>
      <pubDate>Wed, 24 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://omerozkan.net/bir-proje-hikayesi-vipera/</guid>
      <description>

&lt;p&gt;Öncelikle Vipera&amp;rsquo;nın ne olduğundan bahsedeyim. Vipera, bir sağlık sistemidir.
Çeşitli tıbbi cihazlar ile üretilen sağlık verilerini bir API üzerinden sisteme girilmesini sağlar.
Girilen bu verileri hekimlere sunarak hekimlerin hastalar hakkında karar vermesinde yardımcı olur.
Bir karar destek sistemidir. Hekimler kendi panellerinden grafikler üreterek hastanın sağlık durumunu takip eder.
Vipera, tanımlanan acil durum kuralları sayesinde de istenilen bildirim yöntemi ile (SMS ve Android Push Bildirimi halihazırda çalışmaktadır)
hekimlere bildirim gönderir.&lt;/p&gt;

&lt;p&gt;Aslında hedefim Vipera&amp;rsquo;nın hekimin yerine karar vermesini sağlamak yani bir uzman sistem oluşturmaktı.
Fakat bunu yapabilmek oldukça zor ve maliyetli bir işti.
O yüzden üzerinde yapay zeka yöntemlerinin uygulanabileceği verileri öncelikle saklamak gerektiğine karar verdim.&lt;/p&gt;

&lt;h3 id=&#34;teknik-hedef:76ab7a0392d682cc69cc876ca4838d28&#34;&gt;Teknik Hedef&lt;/h3&gt;

&lt;p&gt;Projenin bir de teknik bir hedefi vardı.
Java teknolojileri ile geliştirilmiş tamamen özgür teknolojilere sahip, esnek ve katmanlı bir mimariye sahip bir proje geliştirmekti.
Öğrendiğim yazılım araçlarını da etkin kullanmayı da hedeflemiştim.&lt;br /&gt;
Bitirme projesini bu şekilde yapmayı istedim. Proje konusunu ise danışmanım belirledi.&lt;/p&gt;

&lt;p&gt;Proje için Spring&amp;rsquo;i tercih ettim. Bunun asıl sebebi Spring&amp;rsquo;i öğrenmek istememdi.
Aynı zamanda Spring ile geliştireceğim proje Lightweight bir proje olacaktı.
Bununla birlikte gösterim katmanında JSF ve Primefaces, veri katmanında ise JPA&amp;rsquo;nın Hibernate implementasyonunu tercih ettim.
Defacto olan maven ve diğer araçları da kullandım.
Veritabanı olarak gömülü bir veritabanı yönetim sistemi olan HSQLDB&amp;rsquo;yi, asıl veritabanı yönetim sistemi  tercihim ise PostgreSQL oldu.
Veritabanı bağımsız olduğu için herhangi bir RDBMS kullanabilirdim.&lt;/p&gt;

&lt;h3 id=&#34;vipera:76ab7a0392d682cc69cc876ca4838d28&#34;&gt;Vipera?&lt;/h3&gt;

&lt;p&gt;Neden &amp;ldquo;Vipera&amp;rdquo; adını verdiğimi merak edenleriniz olabilir. Vipera, latince Engerek yılanı cinsi anlamına gelir.
Biyolojik bir isimdir. Sağlık ile ilgili bir proje geliştirdiğimden yılanların latince isimlerinden birini verebileceğimi düşündüm.
&amp;ldquo;Vipera&amp;rdquo; adını görünce proje adını belirledim.&lt;/p&gt;

&lt;h3 id=&#34;geliştirme-süreci:76ab7a0392d682cc69cc876ca4838d28&#34;&gt;Geliştirme Süreci&lt;/h3&gt;

&lt;p&gt;Okul dönemin uzun bir zamanında yarı zamanlı olarak çalıştığım için projeye zaman ayırmam mümkün olmadı.
İlk dönem sonunda sadece giriş ekranını kodlayabilmiştim. Bahar döneminin sonuna projenin bitmesi gerekiyordu.
Projeye başlarken kullanıcı hikayeleri ve görevler listesi oluşturdum. Daha sonra bunları önceliklendirdim.
Daha sonra kullanıcı hikayelerinin implementasyonuna başladım. Katmanlı mimari oluşturmak pek zor olmasa da
birçok teknolojiyi bir arada kullanmak başlangıçta bazı problemlere sebep oldu.
Başlangıçta test güdümlü geliştirsem de zaman ve projenin birçok kısmı basit ve net çözümler olduğundan
test güdümlü geliştirmeyi bıraktım. Fakat birçok yerde temiz kod yazmaya çalıştım.
%100 e yakın dökümantasyon yazdım.&lt;/p&gt;

&lt;h3 id=&#34;tubitak-yarışması:76ab7a0392d682cc69cc876ca4838d28&#34;&gt;Tubitak Yarışması&lt;/h3&gt;

&lt;p&gt;Zaman darlığında projeyi tamamlayamayacağımı düşünürken danışmanım
TUBİTAK tarafından düzenlenen Yazılım Projeleri Yarışması&amp;rsquo;na da katılmamı istedi.
Ben birçok kez katılmamayı düşünürken başvuru tarihinin sonuna yakın bir gecemi harcayarak ilgili belgeleri
hazırladım ve yarışmaya başvurdum.&lt;/p&gt;

&lt;p&gt;Yarışma için projenin yetişmeyeceğine kesin karar vermişken bir taraftan mezun olabilmek için sınavları geçmem gerekiyordu.
Ayrıca Vipera, bitirme projesi olduğundan bu dersi de geçmem gerekiyordu.
Projenin TUBİTAK&amp;rsquo;a teslimine 2 hafta kalmıştı.
O iki hafta sonunda finaller, ödevler, tez hazırlama gibi şeylerle karşılaşacağımdan kalan zamanım sadece 2 haftaydı.
Yarışma ile kendimi motive ederek projeyi tamamlamaya karar verdim.
Vizelerin yorgunluğunu henüz atamamışken gece gündüz projeyi kodlamaya devam ettim.
Son günde projeyi tamamladım fakat yarışma için video ve rapor hazırlamak gerekiyordu.
Video&amp;rsquo;yu montajlayıp izleyemeden TUBİTAK&amp;rsquo;a gönderdim. Rapor ise çok kötü haldeydi.
Elimden gelen bu kadar diyerek kötü internet bağlantısına ve verilen süreyi aşmama rağmen projeyi teslim etmeyi başardım.
Halen videoyu izleyip kendime gülüyorum :)&lt;/p&gt;

&lt;h3 id=&#34;bir-yarışma-hikayesi:76ab7a0392d682cc69cc876ca4838d28&#34;&gt;Bir Yarışma Hikayesi&lt;/h3&gt;

&lt;p&gt;Bitirme projesinin sunumundan bir gün önce final sergisine çağrıldığımı öğrendim. Final sergisine 1 hafta vardı.
Finallerin yorgunluğunu yine atamamışken bu sefer tekrar girişip bildirim sistemini geliştirdim.
Ayrıca afiş tasarımı vs. yaklaşık iki günümü almıştı.
Daha önce android e bulaşmaktan hep kaçmış biri olarak ilk defa bir android uygulaması geliştirdim ve
Vipera&amp;rsquo;nın bildirim sisteminin istemci tarafını yazdım.&lt;/p&gt;

&lt;p&gt;Yarışma açık kaynak kodlu uygulamalar kategorisinde yarışıyordum.
Bu kategorideki projeler, diğer kategorilere ve yarışmalara göre daha düşük kalıyordu.
Teknik  ve açık kaynak felsefesi açısından değerlendirildiğinde benim proje diğer projelerden üstündü.
Sunum için bize yaklaşık 7dk süre verildi. 45dklık bir semineri 75dk&amp;rsquo;da verebilen biri için oldukça kısa bir süreydi.
Üzerinde zaman harcayarak bu sürede sunumu tamamlamayı başardım. Sunumun sadece juriye yapılması,
serginin değerlendirilmemesi gibi yarışma birçok açıdan kalitesizdi.
Sunumu merak edenler yazının sonundaki slideshare sunumundan inceleyebilirler.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;25 Haziran&amp;rsquo;da yapılan ödül töreninde sonuçlar açıklandı ve Vipera üçüncü sırada yer aldı.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;teknik-açıdan-sonuçlar:76ab7a0392d682cc69cc876ca4838d28&#34;&gt;Teknik Açıdan Sonuçlar&lt;/h3&gt;

&lt;p&gt;Vipera, geliştirmiş olduğum ilk proje olması sebebi ile benim için önemli bir yere sahip.
Yarışmada ödül almasından daha çok böyle bir projeyi kısa sürede geliştirebilmek benim için oldukça büyük bir öneme sahip.
Esnek bir yapıda geliştirme yaptığımdan dolayı yeni öğreneceğim Java teknolojilerini de bu proje üzerinde deneme şansım olacak.
Yine benim için en önemli avantajı, hatalarımı görmem oldu. Gördüğüm başlıca eksiklikler şöyle:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gösterim katmanındaki Controller ile işletme katmanının görevlerini karıştırmak,&lt;/li&gt;
&lt;li&gt;LOG yazmak konusunda nerdeyse hiç birşey bilmiyor olmam,&lt;/li&gt;
&lt;li&gt;Nerede test yazılması ve nerede yazılmaması gerektiği konusunda eksiklikler,&lt;/li&gt;
&lt;li&gt;Tasarım desenleri,&lt;/li&gt;
&lt;li&gt;Temiz kod!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Böyle bir projeyi geliştirmek zor olsa da beni motive ettiğini ve bugüne kadarki yazılım çalışmalarımın meyvesini aldığımı söyleyebilirim.&lt;/p&gt;

&lt;p&gt;TUBİTAK yarışmasına katılmayı düşünenler için de en önemli tavsiyem mutlaka bilimsel bir proje ile başvurulması.
Jüri, projenin bilimsel olmasına herşeyden daha çok önem veriyor.&lt;/p&gt;

&lt;h3 id=&#34;güncelleme:76ab7a0392d682cc69cc876ca4838d28&#34;&gt;Güncelleme&lt;/h3&gt;

&lt;p&gt;Bu yazının bu kısmını 7 Mart 2016&amp;rsquo;da yazıyorum. Projenin üzerinden nerdeyse 2 yıl geçmiş. Vipera benim üniversitede
öğrenmek istediğim konuları öğrendiğimin bir göstergesi oldu. Yukarda da bahsettiğim proje hatalarla dolu. Ne de olsa
o zamanlar mezun bile değildim. Projeyi öğrenme amacı ile inceleyecek olan arkadaşlar dikkatli olsunlar.&lt;/p&gt;

&lt;p&gt;Kendi başınıza proje geliştirmenin birçok avantajı bulunmaktadır. Herşeyden önce kendi hatalarınızı kendiniz
görmüş olursunuz. Proje geliştirirken birçok bilgi de beraberinde gelir. Ekip halinde çalışırken ekibe uyumlu olmak
zorundasınız. Birşeyleri değiştirmeniz kolay olmaz veya doğru bildiğiniz konuları hem siz yanlış uygulayabilirsiniz
hem de danıştığınız kişiler yanlış biliyor olabilir. O yüzden mutlaka kendi başınıza bir proje geliştirin.&lt;/p&gt;

&lt;p&gt;Biraz gelecekten gelmiş gibi olacağım ama :) Merak edenler varsa yukardaki eksiklikler konusunda ne olduğunu da yazayım.
Gösterim katmanı ve İşletme katmanı sorunlarını projeden hemen sonra anladım. Kısaca özetlersem gösterim katmanı sadece
io olmalı. Asıl işleri işletme katmanı yapmalı. Log yazmak konusu da projeden projeye değişen bir durum. Fakat veri
değiştiren işlemlerde mutlaka info seviyesinde log yazmalısınız. Test konusunda da oldukça rahatım. Tasarım desenleri
projeden sonra çalıştığım ilk konu oldu. Tasarım desenlerini sorsanız şu an en çok kullanılanları anlatırım.
Fakat tasarım desenlerine tam olarak hakim olmak için tecrübe gerekiyor. Bu konuda ne seviyedeyim ben de bilmiyorum.&lt;/p&gt;

&lt;p&gt;Temiz kod ise yine oldukça önemli. Bu konuda herhangi bir sorun yaşamıyorum. Hatta Akademik Bilişim 16 da &amp;ldquo;Temiz Kod&amp;rdquo;
kursu verdim.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/omerozkan/vipera&#34;&gt;Projenin Kaynak Kodu&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;ui embed&#34;&gt;
    &lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/9b7ywcaut6Jz2j&#34; width=&#34;595&#34; height=&#34;485&#34;
            frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34;
            style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;div class=&#34;ui hidden divider&#34;&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Bowling Katası</title>
      <link>https://omerozkan.net/bowling-katasi/</link>
      <pubDate>Mon, 09 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://omerozkan.net/bowling-katasi/</guid>
      <description>

&lt;p&gt;Robert C. Martin (Uncle Bob)&amp;lsquo;un hazırladığı bowling oyunu katasının videosunu hazırladım.
Zaman buldukça yeni katalar üretmeye ve videolarını hazırlamaya çalışacağım.&lt;/p&gt;

&lt;h3 id=&#34;bowling-oyununun-kuralları:7a957442c0f0cbc9e8daa6c7cecd2dea&#34;&gt;Bowling Oyununun Kuralları&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://omerozkan.net/images/post/bowling-kata/bowling-score.jpg&#34; alt=&#34;Bowling Skor Tablosu&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Oyunda toplamda 10 frame bulunmaktadır.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Her frame de ise 10 tane labutu vurmak için 2 atış hakkı bulunmaktadır.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Her frame’de vurulan toplam labut sayısı skoru gösterir.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Her frame’in başında eğer ilk atışta 10 adet labut birden vurulursa strike yapılmış olunur
ve sonraki iki atışta vurulan labut sayısı kadar bonus skor kazanılır.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Her frame’de 10 pin iki atışta vurulursa spare yapılmış olunur ve sonraki atıştaki vurulan labut sayısı kadar bonus kazanılır.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;10. frame diğerlerinden farklıdır. Bir sonraki atış olmayacağı için son frame’de strike yapılırsa &lt;strong&gt;2&lt;/strong&gt;, spare yapılırsa &lt;strong&gt;1&lt;/strong&gt; atış hakkı daha kazanılır.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kurallara göre Bowling’de en yüksek skor, 12 strike ile 300’dür.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Üstteki resimde örnek bir skor tablosu gösterilmiştir. Daha detaylı bilgi için &lt;a href=&#34;https://tr.wikipedia.org/wiki/Bovling&#34;&gt;Wikipedi&lt;/a&gt;&amp;lsquo;den bilgi alabilirsiniz.&lt;/p&gt;

&lt;p&gt;Video &lt;a href=&#34;http://kodkata.com/bowling-game/&#34;&gt;Kod Kata&lt;/a&gt; sitesinde de yayınlanmıştır.&lt;/p&gt;

&lt;h3 id=&#34;video:7a957442c0f0cbc9e8daa6c7cecd2dea&#34;&gt;Video&lt;/h3&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/rklz35GWtrQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Git ile Sürüm Takibi Semineri</title>
      <link>https://omerozkan.net/git-ile-surum-takibi-semineri/</link>
      <pubDate>Tue, 29 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://omerozkan.net/git-ile-surum-takibi-semineri/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.ozguryazilimgunleri.org.tr/2014/&#34;&gt;Özgür Yazılım ve Linux Günleri 2014&lt;/a&gt;, İstanbul Bahçeşehir Üniversite&amp;rsquo;sinde gerçekleşti.&lt;/p&gt;

&lt;p&gt;Bu etkinliğe ben de &amp;ldquo;Git ile Sürüm Takibi&amp;rdquo; başlıklı sunumum ile katıldım.&lt;/p&gt;

&lt;h3 id=&#34;konu-özeti:b564fd3e9d582c7db3f459c6b697741a&#34;&gt;Konu Özeti&lt;/h3&gt;

&lt;p&gt;Yazılım projelerinde sürüm takip/kontrol sistemi (VCS) araçları olmazsa olmaz araçlardır.
En popüler özgür sürüm takip sistemlerinden biri olan GIT ile nasıl sürüm takip yapıldığını,
merkezi ve dağıtık sürüm takip sistemlerini, dağıtık yapısı,geliştiricilerin kendi yerellerinde de commit yapabilmesi,
çalışma akışı, git ve svn karşılaştırması, conflict çözümü, uzak sunucu ile nasıl çalışıldığı,
git ile çalışma yöntemleri,en sık kullanılan komutları, karşılaşılan bazı problemlerin çözümleri,
özgür araçları ve Gitlab konuları anlatılmıştır.&lt;/p&gt;

&lt;p&gt;Sunum dosyasına aşağıdaki bağlantılardan ulaşabilirsiniz:&lt;/p&gt;

&lt;h3 id=&#34;pdf:b564fd3e9d582c7db3f459c6b697741a&#34;&gt;PDF&lt;/h3&gt;

&lt;p&gt;Pdf dosyasını indirmek için &lt;a href=&#34;https://omerozkan.net/sunumlar/git-ile-surum-takibi.pdf&#34; target=&#34;_blank&#34;&gt;buraya&lt;/a&gt; tıklayınız.&lt;/p&gt;

&lt;h3 id=&#34;slideshare:b564fd3e9d582c7db3f459c6b697741a&#34;&gt;Slideshare&lt;/h3&gt;

&lt;p&gt;&lt;div class=&#34;ui embed&#34;&gt;
    &lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/HxzDuKwnXS5vvD&#34; width=&#34;595&#34; height=&#34;485&#34;
            frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34;
            style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;div class=&#34;ui hidden divider&#34;&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Powermock ve Mockito ile JSF Sınıflarını Test Etmek</title>
      <link>https://omerozkan.net/powermock-ve-mockito-ile-jsf-siniflarini-test-etmek/</link>
      <pubDate>Fri, 03 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://omerozkan.net/powermock-ve-mockito-ile-jsf-siniflarini-test-etmek/</guid>
      <description>&lt;p&gt;JSF Bean sınıflarında FacesContext gibi nesneler kullandığınızda ve bu sınıflara mock nesneler ile birim testleri yazdığınızda
&lt;a href=&#34;https://github.com/mockito/mockito&#34;&gt;Mockito&lt;/a&gt;, JMock gibi araçlar yeterli olmayacaktır. Örnek olarak aşağıdaki metodu inceleyelim.&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/c9bd44aa073505b3514c.js?file=loginAction.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Bu metod basit bir login işlemi gerçekleştirmektedir.
Anlaşılacağı gibi xhtml sayfasında bir buton üzerinde actionListener parametresinde tanımlanmaktadır.
Öncelikle kullanıcı adı ve parolanın boş bırakılıp bırakılmadığını kontrol etmekte eğer alanlar boş değilse
business katmanı ile login işlemini gerçekleştirmektedir.&lt;/p&gt;

&lt;p&gt;Şimdi kodları inceleyelim.  &lt;strong&gt;2&lt;/strong&gt;. satır da JSF sayfasına mesaj göndermek için FacesContext nesnesini &lt;code&gt;FacesContext.getCurrentInstance()&lt;/code&gt;
statik metodu ile almaktadır. &lt;strong&gt;3&lt;/strong&gt;. satırda bir sınıf değişkeni yer almakta bu değişken sayesinde başka bir metod oturum açma işlemini gerçekleştirmektedir.&lt;br /&gt;
&lt;strong&gt;4&lt;/strong&gt;. satırdaki koşul kullanıcı adı ve parola alanlarının boş bırakılıp bırakılmadığını kontrol etmektedir.
&lt;strong&gt;8&lt;/strong&gt;. satır da ise loginManager nesnesi iş katmanının bir nesnesi olup DI (Dependency Injection) ile enjekte edilmektedir.
LoginManager bir interface&amp;rsquo;dir. Bu sayede LoginBean sınıfının iş katmanına bağımlılığı esnek olur.
Aynı zamanda test edebilmek için kolayca mock nesneleri oluşturabiliriz.
Alt katmandan gelen sonuç ise bir &lt;strong&gt;LoginResult&lt;/strong&gt; nesnesidir.&lt;/p&gt;

&lt;p&gt;Burdaki temel sorun &lt;strong&gt;2&lt;/strong&gt;. satırdaki FacesContext nesnesinin statik bir metod aracılığı ile alınmış olmasıdır.
Statik metodları Mockito gibi araçlarla taklid edemeyiz.
Burda benim aklıma gelen ilk çözüm, bir Java anotasyonu oluşturup, setter injection ile uygulama bir servlet container
içerisinde çalıştığında gerçek FacesContext nesnesini enjekte etmesini sağlamak ve test edildiğinde ise kolayca mock
nesneyi enjekte edebilmekti. Diğer çözümler için internette arama yaparken &lt;a href=&#34;https://github.com/jayway/powermock&#34;&gt;PowerMock&lt;/a&gt; ile karşılaştım.
PowerMock ile statik metodlara hatta private alanlara müdahale edebiliyorsunuz.&lt;/p&gt;

&lt;p&gt;Örnekte PowerMock ile Mockito araçlarını beraber kullandım. Mockito yerine dilediğiniz test aracını kullanabilirsiniz. (JMock, EasyMock vs.)&lt;/p&gt;

&lt;p&gt;Öncelikle bir setUp metodu oluşturalım:&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/c9bd44aa073505b3514c.js?file=loginBeanTest.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;32&lt;/strong&gt;. satır da FacesContext sınıfı Mockito ile mock&amp;rsquo;lanmaktadır. 37. satırda benzer şekilde LoginManager sınıfı mocklanmaktadır.
&lt;strong&gt;36&lt;/strong&gt;. satır da test edilecek olan sınıfın nesnesi üretilmektedir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;33&lt;/strong&gt;. satır da &lt;strong&gt;mockStatic()&lt;/strong&gt; metodu kullanılarak FacesContext nesnesinin statik metodları mock&amp;rsquo;lanmış oldu.
&lt;strong&gt;34-35&lt;/strong&gt;. satırlarda PowerMockito.doReturn() metodu ile &lt;em&gt;FacesContex.getCurrentInstance()&lt;/em&gt; statik metodunun davranışı değiştirilmiştir.
Bu sayede birim testlerimizi çalıştırabiliriz. Örnek olarak bir test metodu ekleyelim:&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/c9bd44aa073505b3514c.js?file=loginWithEmptyUsername.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;4-6&lt;/strong&gt;. satırlarda gerekli test verileri girilip login işlemi gerçekleştirilmiştir. &lt;strong&gt;7&lt;/strong&gt;. satırda ise Mockito ile
&lt;code&gt;context.addMessage(null, INVALID_LOGIN)&lt;/code&gt; yani doğru metodun çağrılmasının testi yapılmıştır.&lt;/p&gt;

&lt;p&gt;Bu şekilde testler çalıştırıldığında olumsuz sonuç alırız.
PowerMockito&amp;rsquo;nun gereken sınıfları taklit etmesi için test sınıfının başına aşağıdaki gibi anotasyonlar tanımlanmalıdır:&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/c9bd44aa073505b3514c.js?file=loginBeanTest2.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; satırda testlerin PowerMockRunner ile çalışmasını ve &lt;strong&gt;2&lt;/strong&gt;. satırda ise &lt;strong&gt;FacesContext&lt;/strong&gt; sınıfına ait statik metodun mock&amp;rsquo;lanmasını sağladık.
Bu sayede testlerimiz çalışır hale gelmektedir.&lt;/p&gt;

&lt;p&gt;Bir başka yazıda görüşmek üzere&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Github Depolarının Redmine&#39;a Entegre Edilmesi</title>
      <link>https://omerozkan.net/github-deposunun-redminea-baglanmasi/</link>
      <pubDate>Mon, 02 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://omerozkan.net/github-deposunun-redminea-baglanmasi/</guid>
      <description>&lt;p&gt;İş takip sistemi Redmine&amp;rsquo;ı ve sürüm takip sistemi git&amp;rsquo;i kullanıyorum. Git, SVN gibi sürüm takip sistemlerindeki depoları
redmine&amp;rsquo;a bağlayabiliyorsunuz. Github ise açık kaynak projelere ücretsiz alan sağlıyor.
Github&amp;rsquo;daki bir projemi Redmine&amp;rsquo;a bağlamak istedim. Kendi uğraşımdan sonra &lt;a href=&#34;https://eventualis.org/&#34;&gt;Samed Beyribey&lt;/a&gt;&amp;lsquo;den yardım istedim.
Kendisi nasıl entegre edebileceğimi anlattı. Sizler için de faydalı olacağını düşünerekten bu yazıyı paylaşmak istedim.&lt;/p&gt;

&lt;p&gt;Github depolarınızı Redmine&amp;rsquo;a entegre etmek için aşağıdaki adımları uygulamanız yeterlidir.&lt;/p&gt;

&lt;p&gt;Öncelikle Github deposunu Redmine&amp;rsquo;ın kurulu olduğu sunucuda dilediğiniz bir dizine git projenizi mirror parametresi ile klonlayın.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone https://github.com/omerozkan/vipera.git --mirror&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Eğer projeniz private ise http yerine ssh ile klonlayabilirsiniz.
Klonlama işleminden sonra redmine panelinden Yönetim -&amp;gt; Ayarlar sayfasına gidin ve Depolar sekmesinden bir API Key oluşturun.&lt;/p&gt;

&lt;p&gt;Eklemek istediğiniz projeye gidip projede Ayarlar -&amp;gt; Depolar &amp;lsquo;a tıklayıp yeni bir depo oluşturun.
Burda &amp;ldquo;Path to repository&amp;rdquo; değerine klonladığınız git dizininin tam yolunu yazın.
Klonladığınız git dizinine redmine&amp;rsquo;nın sistemdeki kullanıcısının erişebilmesi gerekiyor. İzinleri ona göre yapılandırın.
Bu işlemi gerçekleştirdikten sonra git deposundaki son değişiklikleri alması ve redmine&amp;rsquo;ın bu değişiklikleri okuması için cron oluşturmak gerekiyor.
Cron oluşturmak için&lt;/p&gt;

&lt;p&gt;&lt;code&gt;crontab -e&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;komutunu girdiğinizde karşınıza vi editoru çıkacaktır. Cron ayarlarınızı vi editorüne girip kaydedebilirsiniz.
Örneğin her saat başı güncellemeleri almak istiyorsanız aşağıdaki cron ayarlarını kullanabilirsiniz.&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/1d0ecc2af86e3d4eb312.js?file=cron&#34;&gt;&lt;/script&gt;

&lt;p&gt;Böylelikle github projenizi redmine&amp;rsquo;a entegre etmiş olursunuz.
Standart olarak &amp;ldquo;refs #işnumarası&amp;rdquo; şeklinde gönderdiğiniz commitler redmine&amp;rsquo;da o işe bağlanacaktır.&lt;/p&gt;

&lt;p&gt;Bir sonraki yazıda görüşmek üzere&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux&#39;da Fare Butonlarına İşlev Atama</title>
      <link>https://omerozkan.net/linuxda-fare-butonlarina-islev-atama/</link>
      <pubDate>Sun, 16 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://omerozkan.net/linuxda-fare-butonlarina-islev-atama/</guid>
      <description>&lt;p&gt;Uzun süreden beri Logitech fare kullanıyorum. Farenin standart tuşları dışında scroll&amp;rsquo;un sağ ve solunda iki ayrı tuşu daha vardı.
Film izlerken VLC player ile filmi ileri geri alabiliyordum. Fakat bunun dışında bu iki tuşu kullanmadığımı farkettim.
VLC dışındaki bir uygulama ile film izlerken sürekli ses kısıp açma ihtiyacım oldu.
Bu ihtiyaçtan dolayı ki bu iki tuşa ses azaltma ve arttırma özelliği ekledim.
Siz de aşağıdaki adımları uygulayarak fare tuşlarınıza işlev atayabilirsiniz.
Kullandığım Linux dağıtımı Fedora 18, fakat diğer dağıtımlar için de aynı şekilde yapılır.
Öncelikle &lt;code&gt;xbindkeys&lt;/code&gt; ve &lt;code&gt;xev&lt;/code&gt; uygulamalarını kuralım.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redhat tabanlı dağıtımlar için&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yum install xbindkeys xev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Debian(Ubuntu,Mint etc) tabanlı dağıtımlar için&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo apt-get install xbindkeys xev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;komutları ile xev ve xbindkeys uygulamalarını sistemimize yükleyelim. Daha sonra xbindkeys komutunu çalıştıralım:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xbindkeys&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Bu komutu çalıştırdıktan sonra aşağıdaki gibi bir hata alabilirsiniz:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Error : /home/omer/.xbindkeysrc not found or reading not allowed.
please, create one with &amp;lsquo;xbindkeys –defaults &amp;gt; /home/omer/.xbindkeysrc&amp;rsquo;.
or, if you want scheme configuration style,
with &amp;lsquo;xbindkeys –defaults-guile &amp;gt; /home/omer/.xbindkeysrc.scm&amp;rsquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;.xbindkeysrc dosyasını bulamadığından dolayı böyle bir hataya rastlayabilirsiniz. Dosya oluşturmak için yukardaki çıktıda gördüğnüz gibi:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xbindkeys –defaults &amp;gt; .xbindkeysrc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Bu komutu girdikten sonra .xindkeysrc dosyası oluşacaktır. Fare butonlarına işlev atamadan önce butonların numaralarını öğrenelim.
Bunun için xen uygulamasından faydalanacağız.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xen&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Bu komutu girdiğinizde karşınıza bir &amp;ldquo;Event Tester&amp;rdquo; penceresi açılacaktır.
Bu pencere üzerinde fare ile bastığınız her tuşun numarasını uçbirim ekranından görebilirsiniz. Örneğin sola tıkladığımda:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ButtonRelease event, serial 28, synthetic NO, window 0x2a00001,
  root 0x1db, subw 0x2a00002, time 7219539, (43,47), root:(293,488),
  state 0x100, button 1, same_screen YES&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Aşağıda button 1 yazısı farenin sol tuşun numarasının 1 olduğunu gösterir.
Örneğin benim atama yapmak istediğim scroll&amp;rsquo;un tuşların numarası 6 ve 7&amp;rsquo;dir.
Sizin de aynı olmayabilir. Bu tuşlara işlev atamak için .xbindkeysrc dosyasını istediğiniz bir editörle açabilirsiniz.&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/0846f89e4223f2481eb8.js?file=xbindkeysrc&#34;&gt;&lt;/script&gt;

&lt;p&gt;Burada &amp;ldquo;komut&amp;rdquo; yerine neyi gerçekleştirmesini istiyorsanız onu giriyorsunuz.
Bu satırı eklediğimde 6. butona bastığımda istediğim komutu gerçekleştirecektir.
Ben 6. buton için ses azaltma, 7. buton için ses arttırma özelliklerini ekledim:&lt;/p&gt;

&lt;div class=&#34;clear code&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//gist.github.com/omerozkan/0846f89e4223f2481eb8.js?file=xbindkeysrcfinal&#34;&gt;&lt;/script&gt;

&lt;p&gt;Dosyayı kaydedip kapattığınızda eğer xbindkeys uygulaması çalışmıyorsa, xbindkeys komutunu tekrar girebilirsiniz.
Eğer sisteminiz her açıldığında xbindkeys uygulamasının aktif olmasını istiyorsanız.
Aşağıdaki komutu girerek karşınıza çıkan pencerede xbindkeys i ekleyerek bu işlemi gerçekleştirebilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gnome-session-properties&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://omerozkan.net/images/post/linux/gnomesessionproperties.png&#34; alt=&#34;Gnome Session Properties&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Bu komut sadece gnome tabanlı masaüstü yöneticilerinde çalışacaktır. KDE kullanıyorsanız, nasıl yapıldığını öğrenmeniz gerekir.&lt;/p&gt;

&lt;p&gt;Bir başka yazıda görüşmek üzere&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Özgür Yazılım ve Kurumsal Java Semineri</title>
      <link>https://omerozkan.net/ozgur-yazilim-ve-javaee-semineri/</link>
      <pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://omerozkan.net/ozgur-yazilim-ve-javaee-semineri/</guid>
      <description>

&lt;p&gt;4 Mayıs 2013 tarihinde Mustafa Kemal Üniversite&amp;rsquo;sinde Özgür Yazılım &amp;amp; GNU/Linux ve KurumsalJava &amp;amp; Web Teknolojileri başlıklı seminerler verdim.
Katılım sayısı hava sıcaklığından dolayı düşük olsa da yine de istediğim seminer ortamını buldum.
Çünkü öğrenmek isteyenler olunca ben de elimden geleni yapmak istedim. Çoğunluk 1. sınıf öğrencilerinden oluşmaktaydı.
Bu özgür yazılım semineri için güzel olsa da JavaEE semineri için dezavantajdı. Çünkü Java malesef okulumuzda 3. sınıfta anlatılıyor.&lt;/p&gt;

&lt;p&gt;Öncelikle “Özgür Yazılım” semineri ile başladım. Özgür yazılımın ve açık kaynak yazılımların ne tür bir yazılım olduğunu
ve lisanslarından bahsettim. Özgür yazılımın doğuşunun hikayesini de anlattım.
Daha sonra GNU/Linux hakkında daha önce hiç Linux kullanmamış kişilere yönelik tanıtım gerçekleştirdim.
Bu seminer zamanında tamamlamayı başardım ancak JavaEE semineri hiç de öyle olmadı :)
Dinleyenlerin çoğunluğu 1. sınıf olduğu için Java teknolojilerinden bahsederken bazı kavramlar hakkında da bilgi vermek zorunda kaldım.
Örneğin persistence katmanında kullanılan teknolojilerden bahsederken ORM’nin ne olduğunu anlatmak zorunda kaldım.
Fakat beni baya yordu açıkçası. Süreyi de baya aşmak durumunda kaldım.
Seminerlerin sonunda ise söz verdiğim gibi “Test Güdümlü Geliştirme”yi de anlattım. Birlikte roman rakamları katası yaptık.
Katılımcıların hiç birinin Java bilmemesine rağmen, TDD’nin doğası gereği çok verimli geçti.&lt;/p&gt;

&lt;p&gt;Hem katılımcılar için hem de benim için güzel tecrübe oldu.
Katılımcıların yazılıma bakış açısını değiştirdiğimi düşünüyorum.
En azından kurumsal java’yı tanıma fırsatı buldular. Umarım gelenler yazılıma hakkını vererek iyi bir yazılımcı olurlar.
Benim açımdan da çok iyi bir tecrübe oldu. Özellikle JavaEE seminerini detaylı bir şekilde anlatabildiğimi görerek birçok
konuda bilgi sahibi olduğumu anladım. Diğer taraftan da yaklaşık 4 saat ayakta kalmak da beni mahvetti.
Linux yaz kampında Hakan hocanın (Hakan Uygun) neler yaşadığını anlayabiliyorum :)&lt;/p&gt;

&lt;p&gt;Sunumların içeriğinin birçoğunu &lt;a href=&#34;https://www.ozguryazilim.com.tr&#34;&gt;Özgür Yazılım A.Ş.&lt;/a&gt; firmasının yaptığı &lt;a href=&#34;http://topluluk.ozguryazilim.com.tr/sunumlar&#34;&gt;sunumlar&lt;/a&gt;dan
aldım. Seminerler konusunda da tavsiyelerini esirgemedikleri için burdan da teşekkür ediyorum.
Sunumları aşağıdaki linklerden edinebilirsiniz.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://omerozkan.net/sunumlar/ozgur-yazilim.pdf&#34; target=&#34;_blank&#34;&gt;Özgür Yazılım ve Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://omerozkan.net/sunumlar/kurumsaljava.pdf&#34; target=&#34;_blank&#34;&gt;Kurumsal Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;slideshare:9bca51cfe4f1f522d373652315ef8a90&#34;&gt;Slideshare&lt;/h2&gt;

&lt;h3 id=&#34;özgür-yazılım-ve-linux:9bca51cfe4f1f522d373652315ef8a90&#34;&gt;Özgür Yazılım ve Linux&lt;/h3&gt;

&lt;div class=&#34;ui embed&#34;&gt;
    &lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/Jj95uRITPMjhv8&#34; width=&#34;595&#34; height=&#34;485&#34;
            frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34;
            style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;div class=&#34;ui hidden divider&#34;&gt;&lt;/div&gt;

&lt;h3 id=&#34;kurumsal-java:9bca51cfe4f1f522d373652315ef8a90&#34;&gt;Kurumsal Java&lt;/h3&gt;

&lt;p&gt;&lt;div class=&#34;ui embed&#34;&gt;
    &lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/K1xxNf1LPcfYz4&#34; width=&#34;595&#34; height=&#34;485&#34;
            frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34;
            style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;div class=&#34;ui hidden divider&#34;&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>